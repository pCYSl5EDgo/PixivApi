// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.PixivApi
{
    public sealed class ArtworkDatabaseInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::PixivApi.ArtworkDatabaseInfo>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::PixivApi.ArtworkDatabaseInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(22);
            writer.Write(value.Id);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::PixivApi.ArtworkType>(formatterResolver).Serialize(ref writer, value.Type, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::PixivApi.ImageUrls>(formatterResolver).Serialize(ref writer, value.ImageUrls, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Title, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Caption, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::PixivApi.User>(formatterResolver).Serialize(ref writer, value.User, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::PixivApi.Tag[]>(formatterResolver).Serialize(ref writer, value.Tags, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string[]>(formatterResolver).Serialize(ref writer, value.Tools, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.CreateDate, options);
            writer.Write(value.PageCount);
            writer.Write(value.Width);
            writer.Write(value.Height);
            writer.Write(value.SanityLevel);
            writer.Write(value.XRestrict);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::PixivApi.MetaSinglePage>(formatterResolver).Serialize(ref writer, value.MetaSinglePage, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::PixivApi.MetaPage[]>(formatterResolver).Serialize(ref writer, value.MetaPages, options);
            writer.Write(value.TotalView);
            writer.Write(value.TotalBookmarks);
            writer.Write(value.IsBookmarked);
            writer.Write(value.Visible);
            writer.Write(value.IsMuted);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::PixivApi.FileExtraInfo>(formatterResolver).Serialize(ref writer, value.ExtraInfo, options);
        }

        public global::PixivApi.ArtworkDatabaseInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::PixivApi.ArtworkDatabaseInfo();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Id = reader.ReadUInt64();
                        break;
                    case 1:
                        ____result.Type = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::PixivApi.ArtworkType>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.ImageUrls = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::PixivApi.ImageUrls>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.Title = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.Caption = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.User = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::PixivApi.User>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.Tags = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::PixivApi.Tag[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 7:
                        ____result.Tools = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 8:
                        ____result.CreateDate = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 9:
                        ____result.PageCount = reader.ReadUInt32();
                        break;
                    case 10:
                        ____result.Width = reader.ReadUInt32();
                        break;
                    case 11:
                        ____result.Height = reader.ReadUInt32();
                        break;
                    case 12:
                        ____result.SanityLevel = reader.ReadUInt32();
                        break;
                    case 13:
                        ____result.XRestrict = reader.ReadUInt32();
                        break;
                    case 14:
                        ____result.MetaSinglePage = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::PixivApi.MetaSinglePage>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 15:
                        ____result.MetaPages = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::PixivApi.MetaPage[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 16:
                        ____result.TotalView = reader.ReadUInt64();
                        break;
                    case 17:
                        ____result.TotalBookmarks = reader.ReadUInt64();
                        break;
                    case 18:
                        ____result.IsBookmarked = reader.ReadBoolean();
                        break;
                    case 19:
                        ____result.Visible = reader.ReadBoolean();
                        break;
                    case 20:
                        ____result.IsMuted = reader.ReadBoolean();
                        break;
                    case 21:
                        ____result.ExtraInfo = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::PixivApi.FileExtraInfo>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
