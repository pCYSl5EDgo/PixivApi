// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.PixivApi
{
    public sealed class UserDetailProfileFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::PixivApi.UserDetailProfile>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::PixivApi.UserDetailProfile value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(24);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Webpage, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Gender, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Birth, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.BirthDay, options);
            writer.Write(value.BirthYear);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Region, options);
            writer.Write(value.AddressId);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.CountryCode, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Job, options);
            writer.Write(value.JobId);
            writer.Write(value.TotalFollowUsers);
            writer.Write(value.TotalMypixivUsers);
            writer.Write(value.TotalIllusts);
            writer.Write(value.TotalManga);
            writer.Write(value.TotalNovels);
            writer.Write(value.TotalIllustBookmarksPublic);
            writer.Write(value.TotalIllustSeries);
            writer.Write(value.TotalNovelSeries);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.BackgroundImageUrl, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.TwitterAccount, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.TwitterUrl, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.PawooUrl, options);
            writer.Write(value.IsPremium);
            writer.Write(value.IsUsingCustomProfileImage);
        }

        public global::PixivApi.UserDetailProfile Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::PixivApi.UserDetailProfile();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Webpage = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.Gender = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.Birth = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.BirthDay = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.BirthYear = reader.ReadUInt32();
                        break;
                    case 5:
                        ____result.Region = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.AddressId = reader.ReadInt64();
                        break;
                    case 7:
                        ____result.CountryCode = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 8:
                        ____result.Job = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 9:
                        ____result.JobId = reader.ReadInt64();
                        break;
                    case 10:
                        ____result.TotalFollowUsers = reader.ReadUInt64();
                        break;
                    case 11:
                        ____result.TotalMypixivUsers = reader.ReadUInt64();
                        break;
                    case 12:
                        ____result.TotalIllusts = reader.ReadUInt64();
                        break;
                    case 13:
                        ____result.TotalManga = reader.ReadUInt64();
                        break;
                    case 14:
                        ____result.TotalNovels = reader.ReadUInt64();
                        break;
                    case 15:
                        ____result.TotalIllustBookmarksPublic = reader.ReadUInt64();
                        break;
                    case 16:
                        ____result.TotalIllustSeries = reader.ReadUInt64();
                        break;
                    case 17:
                        ____result.TotalNovelSeries = reader.ReadUInt64();
                        break;
                    case 18:
                        ____result.BackgroundImageUrl = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 19:
                        ____result.TwitterAccount = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 20:
                        ____result.TwitterUrl = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 21:
                        ____result.PawooUrl = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 22:
                        ____result.IsPremium = reader.ReadBoolean();
                        break;
                    case 23:
                        ____result.IsUsingCustomProfileImage = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
